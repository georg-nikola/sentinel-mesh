package models

import (
	"time"
)

// Metric represents a time-series metric
type Metric struct {
	Name      string            `json:"name"`
	Value     float64           `json:"value"`
	Labels    map[string]string `json:"labels"`
	Timestamp time.Time         `json:"timestamp"`
	Source    string            `json:"source"`
	Type      MetricType        `json:"type"`
}

// MetricType represents the type of metric
type MetricType string

const (
	MetricTypeCounter   MetricType = "counter"
	MetricTypeGauge     MetricType = "gauge"
	MetricTypeHistogram MetricType = "histogram"
	MetricTypeSummary   MetricType = "summary"
)

// Event represents a Kubernetes or system event
type Event struct {
	ID        string            `json:"id"`
	Type      string            `json:"type"`
	Reason    string            `json:"reason"`
	Message   string            `json:"message"`
	Source    string            `json:"source"`
	Object    EventObject       `json:"object"`
	Labels    map[string]string `json:"labels"`
	Timestamp time.Time         `json:"timestamp"`
	Severity  EventSeverity     `json:"severity"`
}

// EventObject represents the object that triggered the event
type EventObject struct {
	Kind      string `json:"kind"`
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	UID       string `json:"uid"`
}

// EventSeverity represents the severity level of an event
type EventSeverity string

const (
	EventSeverityInfo     EventSeverity = "info"
	EventSeverityWarning  EventSeverity = "warning"
	EventSeverityError    EventSeverity = "error"
	EventSeverityCritical EventSeverity = "critical"
)

// NodeMetric represents metrics from a Kubernetes node
type NodeMetric struct {
	NodeName    string            `json:"node_name"`
	CPUUsage    float64           `json:"cpu_usage"`
	MemoryUsage float64           `json:"memory_usage"`
	DiskUsage   float64           `json:"disk_usage"`
	NetworkRx   float64           `json:"network_rx"`
	NetworkTx   float64           `json:"network_tx"`
	PodCount    int               `json:"pod_count"`
	Labels      map[string]string `json:"labels"`
	Conditions  []NodeCondition   `json:"conditions"`
	Timestamp   time.Time         `json:"timestamp"`
}

// NodeCondition represents a condition of a Kubernetes node
type NodeCondition struct {
	Type               string    `json:"type"`
	Status             string    `json:"status"`
	LastTransitionTime time.Time `json:"last_transition_time"`
	Reason             string    `json:"reason"`
	Message            string    `json:"message"`
}

// PodMetric represents metrics from a Kubernetes pod
type PodMetric struct {
	PodName     string               `json:"pod_name"`
	Namespace   string               `json:"namespace"`
	NodeName    string               `json:"node_name"`
	Phase       string               `json:"phase"`
	CPUUsage    float64              `json:"cpu_usage"`
	MemoryUsage float64              `json:"memory_usage"`
	Containers  []ContainerMetric    `json:"containers"`
	Labels      map[string]string    `json:"labels"`
	Annotations map[string]string    `json:"annotations"`
	Timestamp   time.Time            `json:"timestamp"`
}

// ContainerMetric represents metrics from a container
type ContainerMetric struct {
	Name        string  `json:"name"`
	CPUUsage    float64 `json:"cpu_usage"`
	MemoryUsage float64 `json:"memory_usage"`
	RestartCount int32   `json:"restart_count"`
	Ready       bool    `json:"ready"`
}

// ServiceMetric represents metrics from a Kubernetes service
type ServiceMetric struct {
	ServiceName   string            `json:"service_name"`
	Namespace     string            `json:"namespace"`
	Type          string            `json:"type"`
	ClusterIP     string            `json:"cluster_ip"`
	ExternalIPs   []string          `json:"external_ips"`
	Ports         []ServicePort     `json:"ports"`
	EndpointCount int               `json:"endpoint_count"`
	Labels        map[string]string `json:"labels"`
	Timestamp     time.Time         `json:"timestamp"`
}

// ServicePort represents a port in a Kubernetes service
type ServicePort struct {
	Name       string `json:"name"`
	Protocol   string `json:"protocol"`
	Port       int32  `json:"port"`
	TargetPort string `json:"target_port"`
	NodePort   int32  `json:"node_port,omitempty"`
}

// Alert represents an alert generated by the system
type Alert struct {
	ID          string            `json:"id"`
	Name        string            `json:"name"`
	Description string            `json:"description"`
	Severity    AlertSeverity     `json:"severity"`
	Status      AlertStatus       `json:"status"`
	Source      string            `json:"source"`
	Target      AlertTarget       `json:"target"`
	Labels      map[string]string `json:"labels"`
	Annotations map[string]string `json:"annotations"`
	CreatedAt   time.Time         `json:"created_at"`
	UpdatedAt   time.Time         `json:"updated_at"`
	ResolvedAt  *time.Time        `json:"resolved_at,omitempty"`
}

// AlertSeverity represents the severity level of an alert
type AlertSeverity string

const (
	AlertSeverityInfo     AlertSeverity = "info"
	AlertSeverityWarning  AlertSeverity = "warning"
	AlertSeverityError    AlertSeverity = "error"
	AlertSeverityCritical AlertSeverity = "critical"
)

// AlertStatus represents the status of an alert
type AlertStatus string

const (
	AlertStatusFiring   AlertStatus = "firing"
	AlertStatusResolved AlertStatus = "resolved"
	AlertStatusSilenced AlertStatus = "silenced"
)

// AlertTarget represents the target of an alert
type AlertTarget struct {
	Type      string `json:"type"`
	Name      string `json:"name"`
	Namespace string `json:"namespace,omitempty"`
}

// Anomaly represents an anomaly detected by ML algorithms
type Anomaly struct {
	ID          string            `json:"id"`
	Type        AnomalyType       `json:"type"`
	Severity    AnomalySeverity   `json:"severity"`
	Description string            `json:"description"`
	Service     string            `json:"service"`
	Namespace   string            `json:"namespace"`
	Score       float64           `json:"score"`
	Threshold   float64           `json:"threshold"`
	Features    map[string]float64 `json:"features"`
	Labels      map[string]string `json:"labels"`
	DetectedAt  time.Time         `json:"detected_at"`
	ResolvedAt  *time.Time        `json:"resolved_at,omitempty"`
}

// AnomalyType represents the type of anomaly
type AnomalyType string

const (
	AnomalyTypeResourceUsage    AnomalyType = "resource_usage"
	AnomalyTypeTrafficPattern   AnomalyType = "traffic_pattern"
	AnomalyTypeErrorRate        AnomalyType = "error_rate"
	AnomalyTypeLatency          AnomalyType = "latency"
	AnomalyTypeSecurity         AnomalyType = "security"
	AnomalyTypePerformance      AnomalyType = "performance"
)

// AnomalySeverity represents the severity of an anomaly
type AnomalySeverity string

const (
	AnomalySeverityLow      AnomalySeverity = "low"
	AnomalySeverityMedium   AnomalySeverity = "medium"
	AnomalySeverityHigh     AnomalySeverity = "high"
	AnomalySeverityCritical AnomalySeverity = "critical"
)

// ClusterMetric represents cluster-wide metrics
type ClusterMetric struct {
	ClusterName      string            `json:"cluster_name"`
	NodeCount        int               `json:"node_count"`
	PodCount         int               `json:"pod_count"`
	ServiceCount     int               `json:"service_count"`
	NamespaceCount   int               `json:"namespace_count"`
	CPUAllocatable   float64           `json:"cpu_allocatable"`
	CPURequested     float64           `json:"cpu_requested"`
	MemoryAllocatable float64          `json:"memory_allocatable"`
	MemoryRequested  float64           `json:"memory_requested"`
	StorageAllocatable float64         `json:"storage_allocatable"`
	StorageRequested float64           `json:"storage_requested"`
	Labels           map[string]string `json:"labels"`
	Timestamp        time.Time         `json:"timestamp"`
}

// SecurityEvent represents a security-related event
type SecurityEvent struct {
	ID          string               `json:"id"`
	Type        SecurityEventType    `json:"type"`
	Severity    SecurityEventSeverity `json:"severity"`
	Description string               `json:"description"`
	Source      SecurityEventSource  `json:"source"`
	Target      SecurityEventTarget  `json:"target"`
	Action      string               `json:"action"`
	Result      string               `json:"result"`
	UserAgent   string               `json:"user_agent,omitempty"`
	IP          string               `json:"ip,omitempty"`
	Headers     map[string]string    `json:"headers,omitempty"`
	Labels      map[string]string    `json:"labels"`
	Timestamp   time.Time            `json:"timestamp"`
}

// SecurityEventType represents the type of security event
type SecurityEventType string

const (
	SecurityEventTypeAuthentication SecurityEventType = "authentication"
	SecurityEventTypeAuthorization  SecurityEventType = "authorization"
	SecurityEventTypeAccess         SecurityEventType = "access"
	SecurityEventTypeIntrusion      SecurityEventType = "intrusion"
	SecurityEventTypePolicyViolation SecurityEventType = "policy_violation"
)

// SecurityEventSeverity represents the severity of a security event
type SecurityEventSeverity string

const (
	SecurityEventSeverityLow      SecurityEventSeverity = "low"
	SecurityEventSeverityMedium   SecurityEventSeverity = "medium"
	SecurityEventSeverityHigh     SecurityEventSeverity = "high"
	SecurityEventSeverityCritical SecurityEventSeverity = "critical"
)

// SecurityEventSource represents the source of a security event
type SecurityEventSource struct {
	Type      string `json:"type"`
	Name      string `json:"name"`
	Namespace string `json:"namespace,omitempty"`
	IP        string `json:"ip,omitempty"`
	User      string `json:"user,omitempty"`
}

// SecurityEventTarget represents the target of a security event
type SecurityEventTarget struct {
	Type      string `json:"type"`
	Name      string `json:"name"`
	Namespace string `json:"namespace,omitempty"`
	Resource  string `json:"resource,omitempty"`
}